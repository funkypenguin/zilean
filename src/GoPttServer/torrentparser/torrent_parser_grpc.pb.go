// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: torrent_parser.proto

package torrentparser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TorrentParser_ParseTitles_FullMethodName = "/torrentparser.TorrentParser/ParseTitles"
	TorrentParser_Shutdown_FullMethodName    = "/torrentparser.TorrentParser/Shutdown"
)

// TorrentParserClient is the client API for TorrentParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentParserClient interface {
	ParseTitles(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TorrentTitleRequest, TorrentTitleResponse], error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type torrentParserClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentParserClient(cc grpc.ClientConnInterface) TorrentParserClient {
	return &torrentParserClient{cc}
}

func (c *torrentParserClient) ParseTitles(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TorrentTitleRequest, TorrentTitleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TorrentParser_ServiceDesc.Streams[0], TorrentParser_ParseTitles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TorrentTitleRequest, TorrentTitleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TorrentParser_ParseTitlesClient = grpc.BidiStreamingClient[TorrentTitleRequest, TorrentTitleResponse]

func (c *torrentParserClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, TorrentParser_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentParserServer is the server API for TorrentParser service.
// All implementations must embed UnimplementedTorrentParserServer
// for forward compatibility.
type TorrentParserServer interface {
	ParseTitles(grpc.BidiStreamingServer[TorrentTitleRequest, TorrentTitleResponse]) error
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedTorrentParserServer()
}

// UnimplementedTorrentParserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTorrentParserServer struct{}

func (UnimplementedTorrentParserServer) ParseTitles(grpc.BidiStreamingServer[TorrentTitleRequest, TorrentTitleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ParseTitles not implemented")
}
func (UnimplementedTorrentParserServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedTorrentParserServer) mustEmbedUnimplementedTorrentParserServer() {}
func (UnimplementedTorrentParserServer) testEmbeddedByValue()                       {}

// UnsafeTorrentParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentParserServer will
// result in compilation errors.
type UnsafeTorrentParserServer interface {
	mustEmbedUnimplementedTorrentParserServer()
}

func RegisterTorrentParserServer(s grpc.ServiceRegistrar, srv TorrentParserServer) {
	// If the following call pancis, it indicates UnimplementedTorrentParserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TorrentParser_ServiceDesc, srv)
}

func _TorrentParser_ParseTitles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TorrentParserServer).ParseTitles(&grpc.GenericServerStream[TorrentTitleRequest, TorrentTitleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TorrentParser_ParseTitlesServer = grpc.BidiStreamingServer[TorrentTitleRequest, TorrentTitleResponse]

func _TorrentParser_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentParserServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentParser_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentParserServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentParser_ServiceDesc is the grpc.ServiceDesc for TorrentParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "torrentparser.TorrentParser",
	HandlerType: (*TorrentParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _TorrentParser_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ParseTitles",
			Handler:       _TorrentParser_ParseTitles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "torrent_parser.proto",
}
